#Использование встроенных функций
#Функция abs
#print(abs(-10))
#==============================
"""steps = -3
if abs(steps) > 0:
    print('Персонаж двигается')"""
#=====================================================================
#Функция bool
"""Функция bool принимает один аргумент и в зависимости от его зна-
чения возвращает True или False. Если аргумент числовой, функция
вернет False для значения 0 и True во всех остальных случаях. Вот при-
меры использования bool с разными числами:"""
#print(bool(0))
#==============================
#print(bool(1))
#==============================
#print(bool(1123.23))
#==============================
"""my_silly_list = []
print(bool(my_silly_list))"""
#==============================
"""my_silly_list = ['s', 'i', 'l', 'l', 'y']
print(bool(my_silly_list))"""
#==============================
"""year = input('Год рождения: ')
if not bool(year.rstrip()):
    print('Вам следует ввести год своего рождения')"""
#rstrip (она удаляет все пробелы
#в конце строки, если пользователь их введет
#=====================================================================
#Функция dir
#Функция dir выдает информацию о любом переданном ей значении
#dir(['это', 'короткий', 'список'])
#==============================
#dir(1)
#==============================
#popcorn = 'Я люблю попкорн!'
#dir(popcorn)
#==============================
#help(popcorn.upper)
#=====================================================================
#Функция eval
#Функция eval принимает в качестве аргумента строку и выполняет
#ее, считая, что это код на языке Python.
#eval('10*5')
#==============================
#Выражения, состоящие из нескольких строк кода (например, кон-
#струкции if), выполнить, как правило, не удастся:
"""eval('''if True:
print("это не сработает")''')"""
#==============================
"""your_calculation = input('Введите выражение: ')
eval(your_calculation)"""
#=====================================================================
#Функция exec
"""Функция exec похожа на eval, но с ее помощью можно выполнять более
сложный код. Кроме того, exec, в отличие от eval, не возвращает значе-
ния. Например:"""
"""my_small_program = '''print('бутерброд')
print('с колбасой')'''
exec(my_small_program)"""
#=====================================================================
#Функция float
"""Функция fl oat преобразует строку или число в веще-
ственное число, то есть в формат с десятичной запя-
той."""
#float('12')
#==============================
#float('123.456789')
#==============================
"""your_age = input('Введите ваш возраст: ')
age = float(your_age)
if age > 13:
    print('Вы на %s лет старше, чем положено' % (age - 13))"""
#=====================================================================
#Функция int
#int(123.456)
#==============================
#print(int('123'))
#=====================================================================
#Функция len
#print(len('это тестовая строка'))
#==============================
#creature_list = ['единорог', 'циклоп', 'фея', 'эльф', 'дракон', 'тролль']
#print(len(creature_list))
#==============================
"""enemies_map = {'Бэтмен' : 'Джокер', 'Супермен' : 'Лекс Лютор',
               'Человек-паук' : 'Зеленый гоблин'}
print(len(enemies_map))"""
#==============================
"""fruit = ['яблоко', 'банан', 'клементин', 'питайя']
length = len(fruit)
for x in range(0, length):
    print('фрукт с индексом %s: %s' % (x, fruit[x]))"""
#=====================================================================
#Функции max и min
"""numbers = [5, 4, 10, 30, 22]
print(max(numbers))"""
#==============================
"""strings = 'строкаСТРОКА'
print(max(strings))"""
#==============================
"""numbers = [5, 4, 10, 30, 22]
print(min(numbers))"""
#==============================
"""guess_this_number = int(input('Загадайте ваше число: '))
player_guesses = [12, 15, 70, 45]
if max(player_guesses) > guess_this_number:
    print('Бабах! Вы проиграли')
else:
        print('Вы победили')"""
#=====================================================================
#Функция range
"""for x in range(0, 5):
    print(x)"""
#==============================
#print(list(range(0, 5)))
#==============================
"""count_by_twos = list(range(0, 30, 2))
print(count_by_twos)"""
#==============================
"""count_down_by_twos = list(range(40, 10, -2))
print(count_down_by_twos)"""
#=====================================================================
#Функция sum
"""my_list_of_numbers = list(range(0, 500, 50))
print(my_list_of_numbers)
print(sum(my_list_of_numbers))"""
#=====================================================================
#Работа с файлами
#Создание файла
"""test_file = open('D:\\MrCross Files\\Python\\Python\\Test\\test.txt')
text = test_file.read()
print(text)"""
#=====================================================================
#Запись в файл
"""test_file = open('D:\\MrCross Files\\Python\\Python\\Test\\test.txt', 'w')
test_file.write('Ну что ж я вернулся!')
test_file.close()"""
#==============================
"""test_file = open('D:\\MrCross Files\\Python\\Python\\Test\\test.txt')
print(test_file.read())"""
#=====================================================================
